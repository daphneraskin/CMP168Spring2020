import java.util.ArrayList;
import java.util.Arrays;

public abstract class Vehicle {

	protected Person[][] personsOnBoard;
	protected int numberOfRows;
	protected int maxSeatsPerRow;
	protected int[] numSeatsPerRow;
	
	public Vehicle(int numRows, int numSeatPerRow) {
		numberOfRows = numRows;
		for (int i = 0; i<numberOfRows; i++) {
			numSeatsPerRow[i] = numSeatPerRow;
		}
	}
	
	public Vehicle(int[] numSeatsPerRow) {
		this.numSeatsPerRow = numSeatsPerRow;
	}
	
	public Vehicle(Person driver, int[] numSeatsPerRow) {
		this.numSeatsPerRow = numSeatsPerRow;
		if (driver.hasDriverLicense()) {
			personsOnBoard[0][0] = driver;
		}
	}
	
	public abstract boolean loadPassenger(Person p);
	/*for (int i = 0; i<numberOfRows; i++) {
	for (int j = 0; j<numSeatsPerRow[i]; j++) {
		
		if (personsOnBoard[i][j] = null && i = 0) {
			if (p.getAge() > 4 && p.getHeight() > 35) {
				personsOnBoard[i][j] = p;
			}
		}
		
		if (personsOnBoard[i][j] == null && i>0) {
			personsOnBoard[i][j] = p;
		}
		
	}
}*/
	
	public abstract int loadPassengers(Person[] peeps);
	
	public void setDriver(Person p) throws InvalidDriverException{
		if (!(p.hasDriverLicense)) {
			throw new InvalidDriverException();
		}
		else {
			personsOnBoard[0][0] = p;
		}
	}
	
	public Person getDriver() {
		return personsOnBoard[0][0];
	}
	
	public boolean hasDriver() {
		if (personsOnBoard[0][0] instanceof Person ) {
			return true;
		}
		else {
			return false;
		}
	}
	
	public int getNumberOfAvailableSeats() {
		int count = 0;
		
		for (int i = 0; i<numberOfRows; i++) {
			for (int j = 0; j<numSeatsPerRow[i]; j++) {
				
				if (!(personsOnBoard[i][j] instanceof Person)){
					count++;
				}
			}
		}
		
		return count;
	}
	
	public int getNumberOfAvailableSeatsInRow(int row) {
		int count = 0;
		
		for (int i= 0; i<numSeatsPerRow[row]; i++) {
			if (!(personsOnBoard[row][i] instanceof Person)) {
				count++;
			}
		}
		
		return count;
	}
	
	public int getNumberOfPeopleOnBoard() {
		int count = 0;
		
		for (int i = 0; i<numberOfRows; i++) {
			for (int j = 0; j<numSeatsPerRow[i]; j++) {
				if (personsOnBoard[i][j] instanceof Person) {
					count++;
				}
			}
		}
		
		return count;
	}
	
	public int getNumberOfPeopleInRow(int row) {
		int count = 0;
		
		for (int i = 0; i<numSeatsPerRow[row]; i++) {
			if (personsOnBoard[row][i] instanceof Person) {
				count++;
			}
		}
		
		return count;
	}
	
	public Person getPersonInSeat(int row, int col) {
		return personsOnBoard[row][col];
	}
	
	public int[] getLocationOfPersonInVehicle(Person p) {
		
		for (int i = 0; i<numberOfRows; i++) {
			for (int j = 0; j<numSeatsPerRow[i]; j++) {
				
				if (personsOnBoard[i][j].equals(p)) {
					int[] a = {i, j};
					return a;
				}
				
			}
		}
		int[] b = {-1, 1};
		return b;
	}
	
	public Person[] getPeopleInRow(int row) {
		ArrayList<Person> list = new ArrayList<Person>();

		if (row < 0 || row > numberOfRows-1) {
			return null;
		}
		
		for (int i = 0; i<numSeatsPerRow[row]; i++) {
			if (personsOnBoard[row][i] instanceof Person) {
				Person b = personsOnBoard[row][i].clone();
				list.add(b);
			}
		}
		
		if (list.size() < 1) {
			return null;
		}
		
		Person[] cloneList = list.toArray(new Person[0]);
		
		return cloneList;
		
	}
	
	public Person[][] getPeopleOnBoard() {
		Person[][] result = new Person[personsOnBoard.length][];
		for (int i = 0; i<personsOnBoard.length; i++) {
			result[i] = personsOnBoard[i].clone();
				
		}
		return result;
	}
	
	public boolean isPersonInVehicle(Person p) {
		int[] orig = getLocationOfPersonInVehicle(p);
		int[] test = {-1, -1};
		if (Arrays.equals(orig, test)) {
			return true;
		}
		else {
			return false;
		}
	}
	
	public boolean isPersonDriver(Person p) {
		if (personsOnBoard[0][0].equals(p)) {
			return true;
		}
		else {
			return false;
		}
	}
	
}
