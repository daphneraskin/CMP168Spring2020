import java.awt.Color;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.LineBorder;

public class MineSweeperGUI extends JFrame {
	
	Scanner scnr = new Scanner(System.in);
	
	private JPanel panel;
	private JButton[][] buttons;
	private GridLayout tryLayout;
	private int numRows;
	private int numColumns;
	private int numBombs;
	boolean[][] bombGrid;
	private Grid logic;
	private static boolean[][] disabledGrid;
	private static int numToWin = 0;
	public MineSweeperGUI(Grid userLogic) {
		
		super("MineSweeper Game");
		
		logic = userLogic;
		numRows = logic.getNumRows();
		numColumns = logic.getNumColumns();
		numBombs = logic.getNumBombs();
		
		//create a zeroGrid to keep track of disabled buttons set all elements to false
		disabledGrid = new boolean [numRows][numColumns];
		for (int i = 0; i<numRows; i++) {
			for (int j = 0; j<numRows; j++) {
				disabledGrid[i][j] = false;
			}
		}

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		setSize(800, 800);
		setResizable(false);
		setLocationRelativeTo(null);

		tryLayout = new GridLayout(numRows, numColumns);

		panel = new JPanel();
		panel.setLayout(tryLayout);
		buttons = new JButton[numRows][numColumns];

		addButtons(panel);
		add(panel);
		setVisible(true);
		
	}

	public void addButtons(JPanel panel) {
		for (int i = 0; i < numRows; i++) {
			for (int j = 0; j < numColumns; j++) {
				buttons[i][j] = new JButton("");
				buttons[i][j].setBorder(new LineBorder(Color.WHITE));
				buttons[i][j].setForeground(Color.WHITE);
				int row = i;
				int col = j;
				buttons[i][j].addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent event) {
							
						addFlag(row, col);
					}
				});
				panel.add(buttons[i][j]);
				}
			}
		}
	

	public void addFlag(int r, int c) {
		
		JLabel flagged = new JLabel("Flagged");
		buttons[r][c].add(flagged);
		flagged.setVisible(true);
		panel.add(buttons[r][c]);
		add(panel);
		
		buttons[r][c].addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				
				buttons[r][c].remove(flagged);
				if (logic.isBombAtLocation(r, c)) {
					for (int i = 0; i < numRows; i++) {
						for (int j = 0; j < numRows; j++) {
							if (logic.isBombAtLocation(i, j)) {
								buttons[i][j].setText("Bomb");
								buttons[i][j].setForeground(Color.WHITE);
								buttons[i][j].setBackground(new Color(247, 198, 63));
								buttons[i][j].setOpaque(true);
								buttons[i][j].setEnabled(false);
								disabledGrid[i][j] = true;
							} else {
								numToWin = -1;
								revealCell(i, j);
							}
						}
					}						
						addJOptionPane("You Lost the Game!", numRows, numColumns, numBombs);
						
				} else if (logic.getCountAtLocation(r, c) == 0){
						
						disableZeros(r, c);
				}
					
				else {
					revealCell(r, c);
				}
			}
		});
	}
	
	public void addJOptionPane(String title, int rows, int cols, int bombs) {
		int reply = JOptionPane.showConfirmDialog(null, "Would you like to play MineSweeper again?", title, JOptionPane.YES_NO_OPTION);
		if (reply == JOptionPane.YES_OPTION) {
			createGame(true, rows, cols, bombs);
		} else {
		    createGame(false);
		}
	}
	
	public static void createGame(boolean choice, int userRows, int userColumns, int userBombs) {
		
		boolean go = choice;
		
		
		if (go) {
			
			Grid logic = new Grid(userRows, userColumns, userBombs);
			new MineSweeperGUI(logic);
				
		}
		else {
			System.exit(0);
		}
	}
	
	public static void createGame(boolean choice) {
		
		boolean go = choice;
		
		if (go) {
			
			Grid logic = new Grid(10, 10, 25);
			new MineSweeperGUI(logic);
			
			
		}
		else {
			System.exit(0);
		}
	}
	
	public void colorWheel(int count,int r, int c) {
		
		if (count ==0) {
			buttons[r][c].setBackground(new Color(204, 229, 255));
			buttons[r][c].setOpaque(true);
		}
		if (count == 1) {
			buttons[r][c].setBackground(new Color(153, 204, 255));
			buttons[r][c].setOpaque(true);
		}
		if (count == 2) {
			buttons[r][c].setBackground(new Color(102, 178, 255));
			buttons[r][c].setOpaque(true);
		}
		if (count == 3) {
			buttons[r][c].setBackground(new Color(51, 153, 255));
			buttons[r][c].setOpaque(true);
			buttons[r][c].setForeground(Color.white);
		}
		if (count == 4) {
			buttons[r][c].setBackground(new Color(0, 128, 255));
			buttons[r][c].setOpaque(true);
			buttons[r][c].setForeground(Color.white);
		}
		if (count == 5) {
			buttons[r][c].setBackground(new Color(0, 102, 255));
			buttons[r][c].setOpaque(true);
			buttons[r][c].setForeground(Color.white);
		}
		if (count == 6) {
			buttons[r][c].setBackground(new Color(0, 76, 153));
			buttons[r][c].setOpaque(true);
			buttons[r][c].setForeground(Color.white);
		}
		if (count == 7) {
			buttons[r][c].setBackground(new Color(0, 51, 102));
			buttons[r][c].setForeground(Color.white);
			buttons[r][c].setOpaque(true);
		}
		if (count == 8) {
			buttons[r][c].setBackground(new Color(0, 25, 51));
			buttons[r][c].setForeground(Color.white);
			buttons[r][c].setOpaque(true);
		}
		if (count == 9) {
			buttons[r][c].setBackground(new Color(0, 0, 0));
			buttons[r][c].setForeground(Color.white);
			buttons[r][c].setOpaque(true);
		}
		
	}
	
	public void revealCell(int r, int c) {
		
		if (!(disabledGrid[r][c])) {
			int a = logic.getCountAtLocation(r, c);
			colorWheel(a, r, c);
			String counter = Integer.toString(a);
			buttons[r][c].setText(counter);
			buttons[r][c].setEnabled(false);
			disabledGrid[r][c] = true;
			numToWin++;
			testWin(numToWin);
		}
	}
	
	public void testWin(int revealed) {
		if (revealed == ((numRows * numColumns) -numBombs)) {
			addJOptionPane("Congratulations, You Won the Game!", numRows, numColumns, numBombs);
		}
	}
	
	public void disableZeros(int r, int c) {
		
		if (!(disabledGrid[r][c])) {
			revealCell(r, c);
		}
		
		if (r+1 < numRows && logic.getCountAtLocation(r+1, c) == 0 && !(disabledGrid[r+1][c])) {
			disableZeros(r+1, c);
			disableSurrounding(r+1, c);
			
		}
		
		if (c+1 < numColumns && logic.getCountAtLocation(r, c+1) ==0 && !(disabledGrid[r][c+1])) {
			disableZeros(r, c+1);
			disableSurrounding(r, c+1);
			
		}
		
		if (c+1 < numColumns && r+1 <numRows && logic.getCountAtLocation(r+1, c+1)==0 && !(disabledGrid[r+1][c+1])) {
			disableZeros(r+1, c+1);
			disableSurrounding(r+1, c+1);
			
		}
		
		if (c-1 >= 0 && r-1 >= 0 && logic.getCountAtLocation(r-1, c-1) == 0 && !(disabledGrid[r-1][c-1])) {
			disableZeros(r-1, c-1);
			disableSurrounding(r-1, c-1);
			
		}
		
		if (r-1 >= 0 && logic.getCountAtLocation(r-1, c) == 0 && !(disabledGrid[r-1][c])) {
			disableZeros(r-1, c);
			disableSurrounding(r-1, c);
			
		}
		
		if (c-1 >= 0 && logic.getCountAtLocation(r, c-1) == 0 && !(disabledGrid[r][c-1])) {
			disableZeros(r, c-1);
			disableSurrounding(r, c-1);
			
		}
		
		if (r-1 >= 0 && c+1 < numColumns && logic.getCountAtLocation(r-1, c+1) == 0 && !(disabledGrid[r-1][c+1])) {
			disableZeros(r-1, c+1);
			disableSurrounding(r-1, c+1);
			
		}
		
		if (c-1 >= 0 && r + 1 < numRows && logic.getCountAtLocation(r+1, c-1) == 0 && !(disabledGrid[r+1][c-1])) {
			disableZeros(r+1, c-1);
			disableSurrounding(r+1, c-1);
			
		}	
		
		disableSurrounding(r, c);
	}
	
	public void disableSurrounding(int r, int c) {
		
		if (r+1<numRows && !(disabledGrid[r+1][c])) {
			revealCell(r+1, c);
		}
		if (c+1<numColumns && !(disabledGrid[r][c+1])) {
			revealCell(r, c+1);
		}
		if (r+1<numRows && c+1 <numColumns && !(disabledGrid[r+1][c+1])) {
			revealCell(r+1, c+1);
		}
		if (c-1>= 0 && !(disabledGrid[r][c-1])) {
			revealCell(r, c-1);
		}
		if (r-1>= 0 && !(disabledGrid[r-1][c])) {
			revealCell(r-1, c);
		}
		if (r-1>= 0 && c-1 >= 0 && !(disabledGrid[r-1][c-1])) {
			revealCell(r-1, c-1);
		}
		if (r+1<numRows && c-1 >= 0 && !(disabledGrid[r+1][c-1])) {
			revealCell(r+1, c-1);
		}
		if (r-1>=0 && c+1<numColumns && !(disabledGrid[r-1][c+1])) {
			revealCell(r-1, c+1);
		}
	}
	
	public static void main(String[] args) {
		
		createGame(true, 10, 10, 25);
	}
}
