
public class Faculty extends Employee{
	
	private Course[] coursesTaught = new Course[100];
	private int numCoursesTaught;
	private boolean isTenured;
	
	public Faculty() {
		coursesTaught = new Course[100];
		numCoursesTaught = 0;
		isTenured = false;
	}
	
	public Faculty(boolean isTenured) {
		coursesTaught = new Course[100];
		numCoursesTaught = 0;
		this.isTenured = isTenured;
	}
	
	public Faculty(String deptName, boolean isTenured) {
		coursesTaught = new Course[100];
		numCoursesTaught = 0;
		super.setDeptName(deptName);
		this.isTenured = isTenured;
	}
	
	public Faculty(String name, int birthYear, String deptName, boolean isTenured) {
		super(name, birthYear, deptName);
		coursesTaught = new Course[100];
		numCoursesTaught = 0;
		this.isTenured = isTenured;
	}
	
	public boolean isTenured() {
		if (isTenured) {
			return true;
		}
		else {
			return false;
		}
	}
	
	public int getNumCoursesTaught() {
		return numCoursesTaught;
	}
	
	public void setIsTenured(boolean isTenured) {
		this.isTenured = isTenured;
	}
	
	public void addCourseTaught(Course course) {
		
		if (numCoursesTaught < coursesTaught.length) {
			coursesTaught[numCoursesTaught] = course;
			numCoursesTaught++;
		}
	}
	
	public void addCoursesTaught(Course[] course) {
		
		if (numCoursesTaught < coursesTaught.length) {
			if (course.length <= coursesTaught.length - numCoursesTaught) {
				for (Course c: course) {
					addCourseTaught(c);
				}
			}
		}
	}
	
	public Course getCourseTaught(int index) {
		if (index>=0 && index<numCoursesTaught) {
			return coursesTaught[index];
		}
		else {
			return null;
		}
	}
	
	public String getCourseTaughtAsString(int index) {
		
		if (index>=0 && index<numCoursesTaught) {
			String courseDept = coursesTaught[index].getCourseDept();
			int courseNumm = coursesTaught[index].getCourseNum();
			String courseNum = Integer.toString(courseNumm);
			return courseDept + "-" + courseNum;
		}
		else {
			return "";
		}
	}
	
	public String getAllCoursesTaughtAsString() {
		String all = "";
		for (int i = 0; i<numCoursesTaught-1; i++) {
			String add = getCourseTaughtAsString(i) + ", ";
			all = all + add;
		}
		all = all + getCourseTaughtAsString(numCoursesTaught-1);
		return all;
	}
	
	
	@Override
	public int compareTo(Person that) {
		Faculty e = (Faculty) that;
		return Integer.compare(this.numCoursesTaught, e.numCoursesTaught);
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof Faculty) {
			Faculty a = (Faculty)obj;
			if (super.equals(obj) == true) {
				if (this.coursesTaught == a.coursesTaught && this.numCoursesTaught == a.numCoursesTaught && this.isTenured == a.isTenured){
					return true;
				}
				else {
					return false;
				}
			}
			else {
				return false;
			}
		}
		else {
			return false;
		}
	}

	@Override 
	public String toString() {
		String a = super.toString();
		String c = getAllCoursesTaughtAsString();
		String ten = "";
		if (isTenured) {
			ten = "Is Tenured";
				String b = String.format(" Faculty: %11s | Number of Courses Taught: %3d | Courses Taught: %s", ten, numCoursesTaught, c);
				return a + b;
		}
		else {
			ten = "Not Tenured";
			String b = String.format(" Faculty: %11s | Number of Courses Taught: %3d | Courses Taught: %s", ten, numCoursesTaught, c);
			return a + b;
		}
	}

}
