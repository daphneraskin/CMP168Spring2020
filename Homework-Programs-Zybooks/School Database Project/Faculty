
public class Student extends Person{
	
	private static int numStudents = 0; 
	private int studentID; 
	private Course[] coursesTaken;
	private int numCoursesTaken;
	private boolean isGraduate; 
	private String major;
	
	public Student() {
		coursesTaken = new Course[50];
		numCoursesTaken = 0;
		isGraduate = false;
		studentID = numStudents + 1;
		numStudents++;
		major = "undeclared";
	}
	
	public Student(boolean isGraduate) {
		coursesTaken = new Course[50];
		numCoursesTaken = 0;
		studentID = numStudents + 1;
		numStudents++;
		major = "undeclared";
		
		this.isGraduate = isGraduate;
	}
	
	public Student(String major, boolean isGraduate) {
		coursesTaken = new Course[50];
		numCoursesTaken = 0;
		studentID = numStudents + 1;
		numStudents++;
		this.isGraduate = isGraduate;
		this.major = major;
	}
	
	public Student(String name, int birthYear, String major, boolean isGraduate) {
		super(name, birthYear);
		coursesTaken = new Course[50];
		numCoursesTaken = 0;
		studentID = numStudents + 1;
		numStudents++;
		this.isGraduate = isGraduate;
		this.major = major;
	}
	
	public boolean isGraduate() {
		return isGraduate;
	}
	
	public int getNumCoursesTaken() {
		return numCoursesTaken;
	}
	
	public static int getNumStudents() {
		return numStudents;
	}
	
	public int getStudentID() {
		return studentID;
	}
	
	public String getMajor() {
		return major;
	}
	
	public void setIsGraduate(boolean isGraduate) {
		this.isGraduate = isGraduate;
	}
	
	public void setMajor(String major) {
		this.major = major;
	}
	
	public void addCourseTaken(Course course) {
		//maximum capacity of coursesTaken is 50
		if (numCoursesTaken < coursesTaken.length) {
			coursesTaken[numCoursesTaken] = course;
			numCoursesTaken++;
		}
	}
	
	public void addCoursesTaken(Course[] course) {
		if (numCoursesTaken < coursesTaken.length) {
			if (course.length <= coursesTaken.length - numCoursesTaken) {
				for (Course c: course) {
					addCourseTaken(c);
				}
			}
		}
	}
	
	public Course getCourseTaken(int index) {
		if (index >= 0 && index<numCoursesTaken) {
			return coursesTaken[index];
		}
		else {
			return null;
		}
	}
	
	public String getCourseTakenAsString(int index) {
		if (index >= 0 && index<numCoursesTaken) {
			String courseDept = coursesTaken[index].getCourseDept();
			int courseNumm = coursesTaken[index].getCourseNum();
			String courseNum = Integer.toString(courseNumm);
			return courseDept + "-" + courseNum;
		}
		else {
			return null;
		}
	}
	
	public String getAllCoursesTakenAsString()  {
		String all = "";
		if (numCoursesTaken > 0) {
			for (int i = 0; i<numCoursesTaken-1; i++) {
				String add = getCourseTakenAsString(i) + ", ";
				all = all + add;
			}
			all = all + getCourseTakenAsString(numCoursesTaken-1);	
		}
		return all;
	}
	
	@Override
	public int compareTo(Person that) {
		Student e = (Student) that;
		return Integer.compare(this.studentID, e.studentID);
	}
	
	@Override 
	public boolean equals(Object obj) {
		if (obj instanceof Student) {
			Student a = (Student)obj;
			if (super.equals(obj) == true) {
				if (this.studentID == a.studentID && this.coursesTaken == a.coursesTaken && this.numCoursesTaken == a.numCoursesTaken && this.isGraduate == a.isGraduate && this.major == a.major){
					return true;
				}
				else {
					return false;
				}
			}
			else {
				return false;
			}
		}
		else {
			return false;
		}
	}
	
	@Override
	public String toString() {
		String a = super.toString();
		String grad = "";
		String courses = getAllCoursesTakenAsString();
		if (isGraduate) {
			grad = "Graduate";
			String b = String.format(" Student: studentID: %04d | Major %20s | %14s | Number of Courses Taken: %3d | Courses Taken: %s", studentID, major, grad, numCoursesTaken, courses);
			return a + b;
		}
		else {
			grad = "Undergraduate";
			String b = String.format(" Student: studentID: %04d | Major %20s | %14s | Number of Courses Taken: %3d | Courses Taken: %s", studentID, major, grad, numCoursesTaken, courses);
			return a + b;
		}
	}
	
}
