package com.myorganization.employees;

public class Employee {
	private int id;
	private String firstName;
	private String lastName;
	private String address;
	private double salary;
	
	//this is a default constructor (use so you don't get an error if you provide no arguments)
	public Employee() {
		this(0, "John", "Doe", "no address", 800);
	}
	
	//this is an "overloader" constructor
	public Employee(int id, String firstName, String lastName, String address, double salary) {
		this.id = id;
		this.firstName = firstName;
		this.lastName = lastName;
		this.address = address;
		this.salary = salary;
	}
	
	public void setSalary(double salary) {
		if (salary >= 0) {
			this.salary = salary;
		}
	}
	
	public void setId(int id) {
		this.id = id;
	}
	
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	
	//use "this" only when your local variable is the same as the identifier stated in the class
	public void setAddress(String theAddress) {
		address = theAddress;
	}
	
	public double getSalary() {
		return salary;
	}
	
	public int getId() {
		return id;
	}
	
	public String getFirstName() {
		return firstName;
	}
	
	public String getLastName() {
		return lastName;
	}
	
	public String getAddress() {
		return address;
	}
	
	//
	public void increaseSalary(double amount) {
		if (amount > 0) {
			salary += amount;
		}
	}
	
	//if you override the toString(), then Java knows to use it in the newly defined way
	//toString() is part of a "superclass," meaning that it is already defined 
	//Inheritance is one pillar of Object-oriented programming
	//"superClass" is part of this Inheritance
	@Override 
	public String toString() {
		return "[Name: " + firstName + ", " + lastName + ", Salary: " + salary + "]";
	}
}
